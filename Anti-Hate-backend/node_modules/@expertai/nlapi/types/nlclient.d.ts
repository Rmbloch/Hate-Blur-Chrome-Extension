import { AnalyzeResponse, CategorizeResponse, ContextsResponse, DetectorsResponse, EmotionalTraitsResponse, GeoTaxResponse, PIIResponse, TaxonomiesResponse, TaxonomyResponse, TemporalInformationResponse, WriteprintResponse } from "./generated-sources/nlapi";
import { AnalyzerConfig, CategorizerConfig, DetectorConfig } from "./interfaces";
/**
 * NLClient - object-oriented class to call NLApi basic methods: analyze, categorize, detect, context, taxonomies, taxonomy, detectors
 *
 * @exports
 * @class NLClient
 */
export declare class NLClient {
    private _documentAnalysis;
    private _documentClassification;
    private _informationDetection;
    private _userAuthentication;
    constructor();
    /**
     * Analyze return full analysis of text or return specific analysis of text with custom resources
     *
     * @summary Analyze
     * @param {string} text The text to be analyzed
     * @param {AnalyzerConfig} configuration Configuration collect placeholders: context, language and optional part analysis type
     * @returns {AnalyzeResponse} Return analysis of the text
     * @memberof NLClient
     */
    analyze(text: string, configuration: AnalyzerConfig): Promise<AnalyzeResponse>;
    /**
     * Classification text with different taxonomy resources
     *
     * @summary Classification
     * @param {string} text The text to be classified
     * @param {CategorizerConfig} configuration Configuration collect type taxonomy and language
     * @throws "Unsupported language in emotional traits"
     * @returns {CategorizeResponse | GeoTaxResponse | EmotionalTraitsResponse} Return categorize, geotax or emotional traits classification of the text
     * @memberof NLClient
     */
    categorize(text: string, configuration: CategorizerConfig): Promise<CategorizeResponse | GeoTaxResponse | EmotionalTraitsResponse>;
    /**
     * Detect text with custom detector resources: pii, writeprint or temporal-information
     *
     * @summary Detection
     * @param {string} text The text to be detected
     * @param {DetectorConfig} configuration Configuration collect placeholders: detector and language. Detector will be replaced with the name of the detector.
     * @throws "Unsupported detector"
     * @returns {PIIResponse | WriteprintResponse | TemporalInformationResponse} Return pii, writeprint or temporal information detection resources
     * @memberof NLClient
     */
    detect(text: string, configuration: DetectorConfig): Promise<PIIResponse | WriteprintResponse | TemporalInformationResponse>;
    /**
     * Contexts returns information about the context that can be used for document analysis
     *
     * @summary Contexts information
     * @returns {ContextsResponse} Return information about the contexts
     * @memberof NLClient
     */
    contexts(): Promise<ContextsResponse>;
    /**
     * Taxonomies returns the list of the taxonomies that can be used for document classification
     *
     * @summary Taxonomies information
     * @returns {TaxonomiesResponse} Return the list of the taxonomies
     * @memberof NLClient
     */
    taxonomies(): Promise<TaxonomiesResponse>;
    /**
     * Taxonomy returns the category tree for a given taxonomy in a given language
     *
     * @summary Taxonomy tree
     * @param {CategorizerConfig} configuration Configuration collect type taxonomy and language
     * @returns {TaxonomyResponse} Return the category tree for the given taxonomy
     * @memberof NLClient
     */
    taxonomy(configuration: CategorizerConfig): Promise<TaxonomyResponse>;
    /**
     * Detectors returns the list of the detectors that can be used for information detection
     *
     * @summary Detectors information
     * @returns {DetectorsResponse} Return the list of the detectors
     * @memberof NLClient
     */
    detectors(): Promise<DetectorsResponse>;
}
