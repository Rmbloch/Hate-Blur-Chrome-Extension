"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authentication = void 0;
const process = __importStar(require("process"));
const axios_1 = __importDefault(require("axios"));
class Authentication {
    /**
     * Username from env variable
     *
     * @throws "Missing env variable EAI_USERNAME"
     * @returns {string} Return username
     * @private
     * @memberof Authentication
     */
    get username() {
        if (process.env.EAI_USERNAME) {
            return process.env.EAI_USERNAME;
        }
        throw new Error("Missing env variable EAI_USERNAME");
    }
    /**
     * Password from env variable
     *
     * @throws "Missing env variable EAI_PASSWORD"
     * @returns {string} Return user password
     * @private
     * @memberof Authentication
     */
    get password() {
        if (process.env.EAI_PASSWORD) {
            return process.env.EAI_PASSWORD;
        }
        throw new Error("Missing env variable EAI_PASSWORD");
    }
    /**
     * Check if generated token is JWT token
     *
     * @throws "Invalid type of token"
     * @returns {boolean} Return true or false if generated token is JWT token
     * @private
     * @memberof Authentication
     */
    isJWTToken() {
        var _a;
        const jwtTokenArr = (_a = this._accessToken) === null || _a === void 0 ? void 0 : _a.split('.');
        return !!(jwtTokenArr && jwtTokenArr.length === 3);
    }
    /**
     * Check if generated token is expired
     *
     * @returns {boolean} Return true or false if generated token is expired
     * @private
     * @memberof Authentication
     */
    isTokenExpired() {
        if (!this._accessToken) {
            return false;
        }
        if (!this.isJWTToken()) {
            throw new Error("Invalid type of token");
        }
        const payloadBase64 = this._accessToken.split('.')[1];
        const decodedJson = Buffer.from(payloadBase64, 'base64').toString();
        const decoded = JSON.parse(decodedJson);
        const exp = decoded.exp;
        return (Date.now() >= exp * 1000);
    }
    /**
     * Generate token with currect username and password
     *
     * @returns {string} Return generated token
     * @private
     * @memberof Authentication
     */
    generateToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                username: this.username,
                password: this.password
            };
            const res = yield axios_1.default.post('https://developer.expert.ai/oauth2/token', data);
            return res.data;
        });
    }
    /**
     * Get access token from private parameter of Authentication class
     *
     * @returns {string} Return generated token
     * @memberof Authentication
     */
    getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._accessToken && !this.isTokenExpired()) {
                return Promise.resolve(this._accessToken);
            }
            this._accessToken = yield this.generateToken();
            return this._accessToken;
        });
    }
}
exports.Authentication = Authentication;
//# sourceMappingURL=authentication.js.map